{"mappings":"AAEAA,SAASC,cAAc,cAAcC,OAAS,KCiDXC,CAAAA,cACtBC,KAAOD,GAhDCE,EAiDZD,EAjDyBJ,SAASM,iBAAiBD,IAiD9CE,SAASC,IA3CK,IAC1BC,EACAC,EACAC,EAFAF,EA2CiBD,EA1CjBE,EA0CqBD,GAAQA,EAAIG,UAAUC,IAAIV,EAAKC,IAvC9CU,IAASC,sBAAqB,CAACC,EAASF,KAC5CE,EAAQT,SAASU,IACXA,EAAMC,gBACRR,EAAuBO,EAAME,QACxBR,GAAyBG,EAAGM,cACxBT,GACTA,EAAwBM,EAAME,cAIjCE,QAAQZ,MArBQJ,IAAAA,oBDAC,0BACD,yBACD","sources":["./src/scripts/index.js","./src/scripts/dom_utils.js"],"sourcesContent":["import { add_class_on_focus, doms } from './dom_utils'\n\ndocument.querySelector('#intro img').onload = () => {\n  add_class_on_focus({\n    ['.moved_right']: 'move_back',\n    ['.moved_left']: 'move_back',\n    ['.faded_out']: 'fade_in',\n  });\n}\n","// dom{{{\n//==============================================================================\n//                              Select Dom\n//==============================================================================\nexport const doms = (selector) => document.querySelectorAll(selector);\n/*}}}*/\n// observer dom{{{\n//==============================================================================\n//                              Observer Dom\n//==============================================================================\nexport const observer_dom = (\n  dom,\n  action_is_intersecting,\n  action_not_intersecting\n) => {\n  const io = new IntersectionObserver((entries, io) => {\n    entries.forEach((entry) => {\n      if (entry.isIntersecting) {\n        action_is_intersecting(entry.target);\n        if (!action_not_intersecting) io.disconnect();\n      } else if (action_not_intersecting) {\n        action_not_intersecting(entry.target);\n      }\n    });\n  });\n  io.observe(dom);\n};\n/*}}}*/\n// toggle navigation on_scroll{{{\n//==============================================================================\n//                       Toggle Navigation on Scroll\n//==============================================================================\nexport const toggle_navigation_on_scroll = () => {\n  window.addEventListener('scroll', () => {\n    if (window.scrollY > window.position_old) {\n      if (!window.nav_hidden) {\n        doms('nav')[0].style.transform = 'translateY(-100%)';\n        window.nav_hidden = true;\n      }\n    } else if (window.nav_hidden) {\n      doms('nav')[0].style.transform = 'translateY(0)';\n      window.nav_hidden = false;\n    }\n    window.position_old = window.scrollY;\n  });\n};\n/*}}}*/\n// add class on focus{{{\n//==============================================================================\n//                              Add Class on Focus\n//==============================================================================\nexport const add_class_on_focus = (list) => {\n  for (const key in list) {\n    doms(key).forEach((d) => {\n      observer_dom(d, (dom) => dom.classList.add(list[key]));\n    });\n  }\n}; //\n/*}}}*/\n// toggle class on focus{{{\n//==============================================================================\n//                              Toggle Class on Focus\n//==============================================================================\nexport const toggle_class_on_focus = (list) => {\n  for (const key in list) {\n    doms(key).forEach((d) => {\n      observer_dom(\n        d,\n        (dom) => dom.classList.add(list[key]),\n        (dom) => dom.classList.remove(list[key])\n      );\n    });\n  }\n}; //\n/*}}}*/\n// update scroll{{{\n//==============================================================================\n//                              Update Scroll\n//==============================================================================\nexport const update_scroll = () => {\n  window.addEventListener('scroll', () => {\n    document.body.style.setProperty(\n      '--scroll',\n      window.pageYOffset / (document.body.offsetHeight - window.innerHeight)\n    );\n  });\n};\n/*}}}*/\n// click listener{{{\n//==============================================================================\n//                              Click Listener\n//==============================================================================\nexport const click_listener = (dom_string, action) => {\n  doms(dom_string).forEach((dom) => {\n    dom.addEventListener('click', action);\n  });\n};\n//}}}\n// run function on focus{{{\n//==============================================================================\n//                              Run Function on Focus\n//==============================================================================\nexport const run_function_on_focus = (list, action) => {\n  for (const key in list) {\n    doms(key).forEach((d) => {\n      observer_dom(d, action);\n    });\n  }\n}; //\n/*}}}*/\n// typewriter{{{\n//==============================================================================\n//                              Typewriter\n//==============================================================================\nconst sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\nexport const typewriter = (strings, speed, delay) => async (dom) => {\n  let single_string = false;\n  if (strings.length === 0) {\n    strings = [dom.textContent];\n    single_string = true;\n  }\n  while (true) {\n    for (let i = 0; i < strings.length; ++i) {\n      // dom.textContent = '';\n      await sleep(delay);\n      for (let j = 0; j < strings[i].length; ++j) {\n        // dom.textContent += strings[i].charAt(j);\n        dom.textContent = strings[i].substring(0, j + 1);\n        await sleep(speed);\n      }\n      await sleep(delay);\n    }\n    if (single_string) break;\n  }\n};\n//}}}\n"],"names":["document","querySelector","onload","list","key","selector","querySelectorAll","forEach","d","dom","action_is_intersecting","action_not_intersecting","classList","add","io","IntersectionObserver","entries","entry","isIntersecting","target","disconnect","observe"],"version":3,"file":"index.ccf2157e.js.map"}